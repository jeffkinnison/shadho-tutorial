"""First Example: Optimizing sin(x)

This example demonstrates how to set up a basic minimization of
`sin(x) * cos(y)` with `x ~ U(0, 2pi)` and `y ~ U(0, 2pi)`.
Functions
---------
objective
    The objective function to optimize.
"""

import math

import numpy as np

# From SHADHO, we want to import the driver (Shadho object) and the API that
# defines various search spaces.
from shadho import Shadho, spaces


def objective(params):
    """The objective function to optimize.

    Parameters
    ----------
    params : dict
        Dictionary of parameters generated by SHADHO.
    
    Returns
    -------
    float
        The value to optimize over.
    """
    x = params['x']
    y = params['y']

    return np.sin(x) * np.cos(y)


if __name__ == '__main__':
    # We set up the search space for the objective with two domains:
    #    x: a continuous uniform distribution over [0, pi]
    #    y: a discrete set of 1000 evenly-spaced numbers in [0, pi]
    #
    # Note that the dictionary passed to the objective retains the structure
    # defined here.
    search_space = {
        'x': spaces.uniform(0, 2 * math.pi),
        'y': spaces.choice(list(np.linspace(0, 2 * math.pi, 1000)))
    }

    # We next set up the optimizer, which will attempt to minimize the
    # objective locally. It takes an experiment key, the objective function,
    # the search space, a search method, and a timeout.

    opt = Shadho(
        'convex-tutorial',  # Name of this experiment
        objective,          # The function to optimize
        search_space,       # The search space to sample
        method='random',    # The sampling method, one of 'random', 'bayes', 'tpe', 'smac'
        timeout=30          # The time to run the search, in seconds.
    ) 

    # We then run the optimization, and SHADHO records the results.
    # Results are written to 'results.json'.
    opt.run()
